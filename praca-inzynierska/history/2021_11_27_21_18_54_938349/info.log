2021-11-27 21:18:54,938 INFO - statictics.__init__() : Statistics initialized
2021-11-27 21:18:54,951 INFO - statictics.__init__() : Added link to history
2021-11-27 21:18:54,954 INFO - statictics.__init__() : History send to GIT
2021-11-27 21:18:55,352 INFO - data.__prepare() : Data prepared
2021-11-27 21:18:55,405 INFO - data.__augment() : Data augmented
2021-11-27 21:18:55,857 INFO - data.__copy() : Data copied
2021-11-27 21:18:56,405 INFO - data.__read() : Data prepared for algorithms
2021-11-27 21:18:56,506 INFO - data.__preprocess() : Data prepared for neural networks
2021-11-27 21:19:01,779 INFO - densenet121.__init__() : Algorithm initialized
2021-11-27 21:19:01,779 INFO - densenet121.start() : Training started
2021-11-27 21:19:37,971 INFO - densenet121.start() : Training completed
2021-11-27 21:19:37,972 INFO - densenet121.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [2.1913301944732666], 'accuracy': [0.4921875], 'val_loss': [1.4081348180770874], 'val_accuracy': [0.46000000834465027]}
2021-11-27 21:19:38,887 INFO - densenet121.start() : Model saved
2021-11-27 21:19:38,887 INFO - densenet121.start() : Prediction started
2021-11-27 21:19:51,135 INFO - densenet121.start() : Prediction completed
2021-11-27 21:19:51,832 INFO - densenet121.start() : Prediction results: method: DenseNet121, description: ,  train_time: 36.19130778312683, predict_time: 12.247246503829956,  true_positive: 1, true_negative: 22, false_positive: 3, false_negative: 24, sensitivity: 0.04,  specificity: 0.88, precision: 0.25,  accuracy: 0.46,  error: 0.54, f1: 0.06896551724137932, myScore1: 0.3826679438058749, myScore2: 0.0019055823474147164, myScore3: 0.0056311038746392865
2021-11-27 21:19:54,967 INFO - statictics.insert() : History send to GIT
2021-11-27 21:20:04,999 INFO - densenet169.__init__() : Algorithm initialized
2021-11-27 21:20:04,999 INFO - densenet169.start() : Training started
2021-11-27 21:21:05,301 INFO - densenet169.start() : Training completed
2021-11-27 21:21:05,301 INFO - densenet169.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [1.8942455053329468], 'accuracy': [0.6640625], 'val_loss': [3.308022975921631], 'val_accuracy': [0.5]}
2021-11-27 21:21:06,882 INFO - densenet169.start() : Model saved
2021-11-27 21:21:06,882 INFO - densenet169.start() : Prediction started
2021-11-27 21:21:23,245 INFO - densenet169.start() : Prediction completed
2021-11-27 21:21:23,884 INFO - densenet169.start() : Prediction results: method: DenseNet169, description: ,  train_time: 60.301446199417114, predict_time: 16.36218571662903,  true_positive: 25, true_negative: 0, false_positive: 25, false_negative: 0, sensitivity: 1.0,  specificity: 0.0, precision: 0.5,  accuracy: 0.5,  error: 0.5, f1: 0.6666666666666666, myScore1: 0.7333333333333334, myScore2: 0.011055566801200711, myScore3: 0.040744352754114484
2021-11-27 21:21:26,996 INFO - statictics.insert() : History send to GIT
2021-11-27 21:21:35,981 INFO - densenet201.__init__() : Algorithm initialized
2021-11-27 21:21:35,982 INFO - densenet201.start() : Training started
2021-11-27 21:22:35,880 INFO - densenet201.start() : Training completed
2021-11-27 21:22:35,880 INFO - densenet201.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [1.4966245889663696], 'accuracy': [0.484375], 'val_loss': [1.2268047332763672], 'val_accuracy': [0.47999998927116394]}
2021-11-27 21:22:37,958 INFO - densenet201.start() : Model saved
2021-11-27 21:22:37,959 INFO - densenet201.start() : Prediction started
2021-11-27 21:22:48,491 WARNING - def_function.called_with_tracing() : 5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x0000029AB6A07550> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2021-11-27 21:22:57,753 WARNING - def_function.called_with_tracing() : 6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x0000029AB6A07550> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2021-11-27 21:22:57,756 INFO - densenet201.start() : Prediction completed
2021-11-27 21:22:58,441 INFO - densenet201.start() : Prediction results: method: DenseNet201, description: ,  train_time: 59.89784526824951, predict_time: 19.797409057617188,  true_positive: 0, true_negative: 24, false_positive: 1, false_negative: 25, sensitivity: 0.0,  specificity: 0.96, precision: 0.0,  accuracy: 0.48,  error: 0.52, f1: 0.0, myScore1: 0.3363076923076923, myScore2: 0.0, myScore3: 0.0
2021-11-27 21:23:01,528 INFO - statictics.insert() : History send to GIT
2021-11-27 21:23:05,345 INFO - efficientnetb0.__init__() : Algorithm initialized
2021-11-27 21:23:05,346 INFO - efficientnetb0.start() : Training started
2021-11-27 21:23:27,629 INFO - efficientnetb0.start() : Training completed
2021-11-27 21:23:27,630 INFO - efficientnetb0.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.645028829574585], 'accuracy': [0.5859375], 'val_loss': [0.5162320137023926], 'val_accuracy': [0.7799999713897705]}
2021-11-27 21:23:28,175 INFO - efficientnetb0.start() : Model saved
2021-11-27 21:23:28,176 INFO - efficientnetb0.start() : Prediction started
2021-11-27 21:23:35,419 INFO - efficientnetb0.start() : Prediction completed
2021-11-27 21:23:36,052 INFO - efficientnetb0.start() : Prediction results: method: EfficientNetB0, description: ,  train_time: 22.28289222717285, predict_time: 7.243022203445435,  true_positive: 17, true_negative: 22, false_positive: 3, false_negative: 8, sensitivity: 0.68,  specificity: 0.88, precision: 0.85,  accuracy: 0.78,  error: 0.21999999999999997, f1: 0.7555555555555556, myScore1: 1.1513232323232325, myScore2: 0.03390742762890511, myScore3: 0.10431495780810189
2021-11-27 21:23:39,178 INFO - statictics.insert() : History send to GIT
2021-11-27 21:23:45,242 INFO - efficientnetb1.__init__() : Algorithm initialized
2021-11-27 21:23:45,242 INFO - efficientnetb1.start() : Training started
2021-11-27 21:24:15,545 WARNING - def_function.called_with_tracing() : 5 out of the last 9 calls to <function Model.make_test_function.<locals>.test_function at 0x0000029AA1A944C0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2021-11-27 21:24:16,956 INFO - efficientnetb1.start() : Training completed
2021-11-27 21:24:16,957 INFO - efficientnetb1.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.7917276620864868], 'accuracy': [0.515625], 'val_loss': [0.5440800786018372], 'val_accuracy': [0.7400000095367432]}
2021-11-27 21:24:17,617 INFO - efficientnetb1.start() : Model saved
2021-11-27 21:24:17,617 INFO - efficientnetb1.start() : Prediction started
2021-11-27 21:24:27,104 INFO - efficientnetb1.start() : Prediction completed
2021-11-27 21:24:27,785 INFO - efficientnetb1.start() : Prediction results: method: EfficientNetB1, description: ,  train_time: 31.714603900909424, predict_time: 9.4875168800354,  true_positive: 14, true_negative: 23, false_positive: 2, false_negative: 11, sensitivity: 0.56,  specificity: 0.92, precision: 0.875,  accuracy: 0.74,  error: 0.26, f1: 0.6829268292682927, myScore1: 1.035578799249531, myScore2: 0.02153351280697249, myScore3: 0.07198161941670712
2021-11-27 21:24:30,827 INFO - statictics.insert() : History send to GIT
2021-11-27 21:24:36,915 INFO - efficientnetb2.__init__() : Algorithm initialized
2021-11-27 21:24:36,915 INFO - efficientnetb2.start() : Training started
2021-11-27 21:25:08,783 WARNING - def_function.called_with_tracing() : 6 out of the last 11 calls to <function Model.make_test_function.<locals>.test_function at 0x0000029AA62DBE50> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2021-11-27 21:25:11,282 INFO - efficientnetb2.start() : Training completed
2021-11-27 21:25:11,283 INFO - efficientnetb2.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.6765271425247192], 'accuracy': [0.546875], 'val_loss': [0.5134264230728149], 'val_accuracy': [0.8399999737739563]}
2021-11-27 21:25:12,091 INFO - efficientnetb2.start() : Model saved
2021-11-27 21:25:12,091 INFO - efficientnetb2.start() : Prediction started
2021-11-27 21:25:24,707 INFO - efficientnetb2.start() : Prediction completed
2021-11-27 21:25:25,892 INFO - efficientnetb2.start() : Prediction results: method: EfficientNetB2, description: ,  train_time: 34.36646366119385, predict_time: 12.61555290222168,  true_positive: 18, true_negative: 24, false_positive: 1, false_negative: 7, sensitivity: 0.72,  specificity: 0.96, precision: 0.9473684210526315,  accuracy: 0.84,  error: 0.16000000000000003, f1: 0.8181818181818181, myScore1: 1.3808277511961722, myScore2: 0.02380756502175981, myScore3: 0.06485501067794905
2021-11-27 21:25:29,757 INFO - statictics.insert() : History send to GIT
2021-11-27 21:25:40,375 INFO - efficientnetb3.__init__() : Algorithm initialized
2021-11-27 21:25:40,375 INFO - efficientnetb3.start() : Training started
2021-11-27 21:26:35,534 INFO - efficientnetb3.start() : Training completed
2021-11-27 21:26:35,535 INFO - efficientnetb3.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.6417883634567261], 'accuracy': [0.609375], 'val_loss': [0.554057240486145], 'val_accuracy': [0.6800000071525574]}
2021-11-27 21:26:36,544 INFO - efficientnetb3.start() : Model saved
2021-11-27 21:26:36,544 INFO - efficientnetb3.start() : Prediction started
2021-11-27 21:26:56,558 INFO - efficientnetb3.start() : Prediction completed
2021-11-27 21:26:57,468 INFO - efficientnetb3.start() : Prediction results: method: EfficientNetB3, description: ,  train_time: 55.13325119018555, predict_time: 20.013413906097412,  true_positive: 23, true_negative: 11, false_positive: 14, false_negative: 2, sensitivity: 0.92,  specificity: 0.44, precision: 0.6216216216216216,  accuracy: 0.68,  error: 0.31999999999999995, f1: 0.7419354838709677, myScore1: 0.9496299040976461, myScore2: 0.013457132816485202, myScore3: 0.03707191023740957
2021-11-27 21:27:00,472 INFO - statictics.insert() : History send to GIT
2021-11-27 21:27:15,976 INFO - efficientnetb4.__init__() : Algorithm initialized
2021-11-27 21:27:15,976 INFO - efficientnetb4.start() : Training started
2021-11-27 21:29:52,362 INFO - efficientnetb4.start() : Training completed
2021-11-27 21:29:52,362 INFO - efficientnetb4.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.679062008857727], 'accuracy': [0.5703125], 'val_loss': [0.5355032086372375], 'val_accuracy': [0.7599999904632568]}
2021-11-27 21:29:56,187 INFO - efficientnetb4.start() : Model saved
2021-11-27 21:29:56,187 INFO - efficientnetb4.start() : Prediction started
2021-11-27 21:30:28,669 INFO - efficientnetb4.start() : Prediction completed
2021-11-27 21:30:30,871 INFO - efficientnetb4.start() : Prediction results: method: EfficientNetB4, description: ,  train_time: 156.38384461402893, predict_time: 32.48181200027466,  true_positive: 18, true_negative: 20, false_positive: 5, false_negative: 7, sensitivity: 0.72,  specificity: 0.8, precision: 0.782608695652174,  accuracy: 0.76,  error: 0.24, f1: 0.7499999999999999, myScore1: 1.097927536231884, myScore2: 0.004795891812553115, myScore3: 0.02308984486437081
2021-11-27 21:30:35,770 INFO - statictics.insert() : History send to GIT
2021-11-27 21:31:09,022 INFO - efficientnetb5.__init__() : Algorithm initialized
2021-11-27 21:31:09,022 INFO - efficientnetb5.start() : Training started
2021-11-27 21:33:30,326 INFO - efficientnetb5.start() : Training completed
2021-11-27 21:33:30,326 INFO - efficientnetb5.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.6225184202194214], 'accuracy': [0.6640625], 'val_loss': [0.5538294315338135], 'val_accuracy': [0.7400000095367432]}
2021-11-27 21:33:32,616 INFO - efficientnetb5.start() : Model saved
2021-11-27 21:33:32,617 INFO - efficientnetb5.start() : Prediction started
2021-11-27 21:33:58,450 INFO - efficientnetb5.start() : Prediction completed
2021-11-27 21:33:59,651 INFO - efficientnetb5.start() : Prediction results: method: EfficientNetB5, description: ,  train_time: 141.30286526679993, predict_time: 25.83247971534729,  true_positive: 14, true_negative: 23, false_positive: 2, false_negative: 11, sensitivity: 0.56,  specificity: 0.92, precision: 0.875,  accuracy: 0.74,  error: 0.26, f1: 0.6829268292682927, myScore1: 1.035578799249531, myScore2: 0.0048330713462804145, myScore3: 0.02643675081887552
2021-11-27 21:34:03,105 INFO - statictics.insert() : History send to GIT
2021-11-27 21:34:22,098 INFO - efficientnetb6.__init__() : Algorithm initialized
2021-11-27 21:34:22,098 INFO - efficientnetb6.start() : Training started
2021-11-27 21:36:05,492 INFO - efficientnetb6.start() : Training completed
2021-11-27 21:36:05,493 INFO - efficientnetb6.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.6063648462295532], 'accuracy': [0.6875], 'val_loss': [0.5520534515380859], 'val_accuracy': [0.7200000286102295]}
2021-11-27 21:36:07,639 INFO - efficientnetb6.start() : Model saved
2021-11-27 21:36:07,639 INFO - efficientnetb6.start() : Prediction started
2021-11-27 21:36:35,508 INFO - efficientnetb6.start() : Prediction completed
2021-11-27 21:36:36,254 INFO - efficientnetb6.start() : Prediction results: method: EfficientNetB6, description: ,  train_time: 103.3945004940033, predict_time: 27.869282484054565,  true_positive: 20, true_negative: 16, false_positive: 9, false_negative: 5, sensitivity: 0.8,  specificity: 0.64, precision: 0.6896551724137931,  accuracy: 0.72,  error: 0.28, f1: 0.7407407407407408, myScore1: 1.0124787447546069, myScore2: 0.007164217992268385, myScore3: 0.026579110573246953
2021-11-27 21:37:04,334 INFO - statictics.insert() : History send to GIT
2021-11-27 21:37:21,453 INFO - efficientnetb7.__init__() : Algorithm initialized
2021-11-27 21:37:21,453 INFO - efficientnetb7.start() : Training started
2021-11-27 21:39:47,652 INFO - efficientnetb7.start() : Training completed
2021-11-27 21:39:47,653 INFO - efficientnetb7.start() : Training results: {'verbose': 1, 'epochs': 1, 'steps': 4}{'loss': [0.6788074970245361], 'accuracy': [0.5546875], 'val_loss': [0.5410690307617188], 'val_accuracy': [0.800000011920929]}
2021-11-27 21:39:50,329 INFO - efficientnetb7.start() : Model saved
2021-11-27 21:39:50,330 INFO - efficientnetb7.start() : Prediction started
2021-11-27 21:40:35,131 INFO - efficientnetb7.start() : Prediction completed
2021-11-27 21:40:36,178 INFO - efficientnetb7.start() : Prediction results: method: EfficientNetB7, description: ,  train_time: 146.1986334323883, predict_time: 44.80094838142395,  true_positive: 16, true_negative: 24, false_positive: 1, false_negative: 9, sensitivity: 0.64,  specificity: 0.96, precision: 0.9411764705882353,  accuracy: 0.8,  error: 0.19999999999999996, f1: 0.7619047619047621, myScore1: 1.2150700280112048, myScore2: 0.0052114355929128164, myScore3: 0.017006442707821662
